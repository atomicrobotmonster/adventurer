{
	"auto_complete":
	{
		"selected_items":
		[
		]
	},
	"buffers":
	[
		{
			"file": "src/adventure/MysteriousBeach.scala",
			"settings":
			{
				"buffer_size": 1382,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/game/Adventurer.scala",
			"settings":
			{
				"buffer_size": 227,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "package game\n\nimport adventure.MysteriousBeach\nimport world.Location\n\nobject Shell extends App {\n  private var adventuring = true\n  private val adventure = MysteriousBeach\n\n  class ShellAdventurer(var adventurer: Adventurer) {\n\n    var inventory = Set()\n\n    def exits {\n      if (adventurer.currentLocation.hasExits) {\n        println(\"You can travel:\")\n        adventurer.currentLocation.exits foreach { case (exitLabel: String, location: Location) => println(s\"* $exitLabel -> ${location.name}\") }\n      } else {\n        println(\"There are no apparent exits...\")\n      }\n    }\n\n    def showLocation {\n      println(adventurer.currentLocation.description)\n      if (adventurer.currentLocation.hasItems) {\n        println(\"\\nYou see the following items:\")\n        adventurer.currentLocation.items foreach { i => println(s\"* ${i.label}\") }\n      }\n    }\n\n    def look {\n      showLocation\n      if (adventure.displayExitsOnLook) {\n        println()\n        exits\n      }\n    }\n\n    def stopAdventuring = adventuring = false\n\n    def examine(itemNameParts: List[String]) = itemNameParts match {\n      case List(\"me\") => println(adventurer.description)\n      case List() =>\n        println(\"What would you like to examine?\")\n      case List(_*) => {\n        val itemName = itemNameParts.mkString(\" \")\n        adventurer.currentLocation.findNamedItem(itemName) match {\n          case List(foundItem) => println(foundItem.description)\n          case List(_, _*) => println(s\"There is more than one $itemName. You need to be more specific.\")\n          case _ => println(\"I don't know what that is.\")\n        }\n      }\n    }\n\n    def move(exitNameParts: List[String]) {\n      if (!exitNameParts.isEmpty) {\n\n        adventurer.currentLocation.findNamedExit(exitNameParts.head) match {\n          case Some(location) => {\n            adventurer.moveTo(location)\n            showLocation\n          }\n          case _ => invalidDestination\n        }\n      } else println(\"Where do you want to go?\")\n    }\n\n    def useExit(mightBeAnExitName: String) {\n      adventurer.currentLocation.exits.get(mightBeAnExitName) match {\n        case Some(destination) => {\n          adventurer.moveTo(destination)\n          showLocation\n        }\n        case _ => invalidDestination\n      }\n    }\n\n    def take(itemNameParts: List[String]) {\n      itenNameParts match {\n        case Nil => println(\"What do you want to take?\"\n        case List(_*) => {\n          val itemName = itemNameParts.mkString(\" \")\n            adventurer.currentLocation.findNamedItem(itemName) match {\n            case List(foundItem) => inventory += foundItem\n            case List(_, _*) => println(s\"There is more than one $itemName. You need to be more specific.\")\n            case _ => println(\"I don't know what that is.\")\n          }\n        }\n      )\n    }\n\n    def invalidAction = println(\"You don't know how to do that.\")\n\n    def invalidDestination = println(\"You can't go that way.\")\n\n  }\n  private val avatar = new ShellAdventurer(adventure.begin)\n\n  avatar.showLocation\n\n  do {\n\n    Console.print(\"\\n> \")\n    val playerInput = Console.readLine.trim.toLowerCase()\n    Console.println\n\n    val inputTokens: List[String] = playerInput.split(\"\\\\s+\").toList\n\n    inputTokens match {\n      case List(\"quit\") => avatar.stopAdventuring\n      case List(\"look\") => avatar.look\n      case \"examine\" :: itemNameParts => avatar.examine(itemNameParts)\n      case \"go\" :: exitNameParts => avatar.move(exitNameParts)\n      case \"walk\" :: exitNameParts => avatar.move(exitNameParts)\n      case List(\"exits\") => avatar.exits\n      case List(\"\") => Unit\n      case List(\"help\") => showCommands\n      case List(\"commands\") => showCommands\n      case List(\"north\") => avatar.useExit(\"north\")\n      case List(\"south\") => avatar.useExit(\"south\")\n      case List(\"east\") => avatar.useExist(\"east\")\n      case List(\"west\") => avatar.useExist(\"west\")\n      case _ => avatar.invalidAction\n    }\n\n  } while (adventuring)\n\n  println(\"You'll never win that way.\")\n\n  def showCommands {\n    println(\"quit, look, examine, go, walk, north, south, exits, help, commands\")\n  }\n\n}",
			"file": "src/game/Shell.scala",
			"file_size": 4107,
			"file_write_time": 1396193038000000,
			"settings":
			{
				"buffer_size": 4107,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"command_palette":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"console":
	{
		"height": 0.0
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
	],
	"find":
	{
		"height": 0.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 2,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "src/adventure/MysteriousBeach.scala",
					"settings":
					{
						"buffer_size": 1382,
						"regions":
						{
						},
						"selection":
						[
							[
								167,
								167
							]
						],
						"settings":
						{
							"syntax": "Packages/Scala/Scala.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 27.0,
						"translation.y": 52.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "src/game/Adventurer.scala",
					"settings":
					{
						"buffer_size": 227,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Scala/Scala.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "src/game/Shell.scala",
					"settings":
					{
						"buffer_size": 4107,
						"regions":
						{
						},
						"selection":
						[
							[
								2609,
								2609
							]
						],
						"settings":
						{
							"syntax": "Packages/Scala/Scala.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 8.0,
						"translation.y": 799.0,
						"zoom_level": 1.0
					},
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 0.0
	},
	"input":
	{
		"height": 0.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"replace":
	{
		"height": 0.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 232.0,
	"status_bar_visible": true
}
